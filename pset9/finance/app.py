import os
import string
import pprint
import copy
from cs50 import SQL
from flask import Flask, flash, redirect, render_template, request, session
from flask_session import Session
from tempfile import mkdtemp
from werkzeug.exceptions import default_exceptions, HTTPException, InternalServerError
from werkzeug.security import check_password_hash, generate_password_hash

from helpers import apology, login_required, lookup, usd, password_check

# Configure application
app = Flask(__name__)

# Ensure templates are auto-reloaded
app.config["TEMPLATES_AUTO_RELOAD"] = True

REGISTRANTS = {}

# Ensure responses aren't cached


@app.after_request
def after_request(response):
    response.headers["Cache-Control"] = "no-cache, no-store, must-revalidate"
    response.headers["Expires"] = 0
    response.headers["Pragma"] = "no-cache"
    return response


# Custom filter
app.jinja_env.filters["usd"] = usd

# Configure session to use filesystem (instead of signed cookies)
app.config["SESSION_FILE_DIR"] = mkdtemp()
app.config["SESSION_PERMANENT"] = False
app.config["SESSION_TYPE"] = "filesystem"
Session(app)

# Configure CS50 Library to use SQLite database
db = SQL("sqlite:///finance.db")

# Make sure API key is set
if not os.environ.get("API_KEY"):
    raise RuntimeError("API_KEY not set")


@app.route("/")
@login_required
def index():
    """Show portfolio of stocks"""
    # Getting all the stocks
    display_stocks = db.execute(
        "SELECT DISTINCT symbol FROM stocks JOIN transactions ON stocks.id = transactions.stock_id JOIN users ON transactions.user_id = users.id WHERE users.id = ?",  session["user_id"])
    stock_dict = dictionary(display_stocks, session["user_id"])
    total_money = db.execute("SELECT cash FROM users WHERE id = ?", session["user_id"])
    return render_template("index.html", display=stock_dict, total_money=usd(total_money[0]["cash"]))


@app.route("/buy", methods=["GET", "POST"])
@login_required
def buy():
    """Buy shares of stock"""
    amount = request.form.get("shares")
    symbol = request.form.get("symbol")
    if request.method == "POST":

        if not symbol or lookup(symbol) == None:
            return apology("You need to type a valid stock symbol", 400)

        if not amount:
            return apology("Select the amount of shares", 400)

        if amount.isnumeric() == False:
            return apology("You need to type a positive integer!", 400)

        else:
            success = "Success! You bought:"

            # Copying th dictionary generated by lookup function
            stock = copy.deepcopy(lookup(symbol))

            # The price depends on the amount of stocks
            stock_price = round(float(stock["price"]) * int(amount), 3)

            # Checking the current amount of money
            total_money = db.execute("SELECT * FROM users WHERE id = ?", session["user_id"])

            if total_money[0]["cash"] >= stock_price:
                # Inserting the stock symbol if not in table "stocks"
                symbol_id = db.execute("SELECT id FROM stocks WHERE symbol= ?", symbol)
                if not symbol_id:
                    db.execute("INSERT INTO stocks (symbol) VALUES(?)", symbol)
                    symbol_id = db.execute("SELECT id FROM stocks WHERE symbol= ?", symbol)

                total_money[0]["cash"] = round(total_money[0]["cash"] - stock_price, 3)
                db.execute("INSERT INTO transactions (buy, sell, user_id, shares, stock_id) VALUES(?, ?, ?, ?, ?)",
                           stock_price, 0, session["user_id"], amount, symbol_id[0]["id"])
                db.execute("UPDATE users SET cash = ? WHERE id = ?",
                           total_money[0]["cash"], session["user_id"])

                return render_template("buy.html", success=success, total_price=usd(stock_price), stock_name=stock["name"], total_money=usd(total_money[0]["cash"]))

            else:
                return apology("You do not have enough money!", 400)

    else:
        return render_template("buy.html")


@app.route("/history")
@login_required
def history():
    """Show history of transactions"""
    history = db.execute("SELECT symbol, buy, sell, timestamp FROM transactions JOIN stocks ON transactions.stock_id = stocks.id WHERE user_id = ? ORDER BY timestamp DESC",
                         session["user_id"])
    return render_template("history.html", history=history)


@app.route("/login", methods=["GET", "POST"])
def login():
    """Log user in"""

    # Forget any user_id
    session.clear()

    # User reached route via POST (as by submitting a form via POST)
    if request.method == "POST":

        # Ensure username was submitted
        if not request.form.get("username"):
            return apology("must provide username", 403)

        # Ensure password was submitted
        elif not request.form.get("password"):
            return apology("must provide password", 403)

        # Query database for username
        rows = db.execute("SELECT * FROM users WHERE username = ?",
                          request.form.get("username"))

        # Ensure username exists and password is correct
        if len(rows) != 1 or not check_password_hash(rows[0]["hash"], request.form.get("password")):
            return apology("invalid username and/or password", 403)

        # Remember which user has logged in
        session["user_id"] = rows[0]["id"]

        # Redirect user to home page
        return redirect("/")

    # User reached route via GET (as by clicking a link or via redirect)
    else:
        return render_template("login.html")


@app.route("/logout")
def logout():
    """Log user out"""

    # Forget any user_id
    session.clear()

    # Redirect user to login form
    return redirect("/")


@app.route("/quote", methods=["GET", "POST"])
@login_required
def quote():
    """Get stock quote."""
    symbol = request.form.get("symbol")

    if request.method == "POST":
        if not symbol:
            return apology("You need to type a symbol", 400)
        elif lookup(symbol) == None:
            return apology("Symbol not found!")
        else:
            informations = lookup(symbol)
            informations["price"] = usd(informations["price"])
            return render_template("quote.html", informations=informations)
    else:
        return render_template("quote.html")


@app.route("/register", methods=["GET", "POST"])
def register():
    """Register user"""
    # Variables to check
    username = request.form.get("username")
    password = request.form.get("password")
    conf_password = request.form.get("confirmation")

    if request.method == "GET":
        return render_template("register.html")

    if request.method == "POST":

        # Check for an username
        if not username:
            return apology("You need to type an username", 400)

        # Check for a password
        elif not password:
            return apology("You need to type a password", 400)

        # Calling a function to check the required password parameters
        elif password_check(password) == False:
            return apology("Your password must contain at least 6 characters, a number, a lowercase and uppercase letter", 400)

        # The user needs to type a password confirmation
        elif not conf_password:
            return apology("You need to confirm your password!", 400)

        # The confirmation must match with the password
        elif password != conf_password:
            return apology("The password typed doesn't match to the confirmation", 400)

        # Generating a hash of the password
        hash = generate_password_hash(password)

        # Once all the errors are checked, add the values into the database
        if not db.execute("SELECT username FROM users WHERE username = (?)", username):
            db.execute(
                "INSERT INTO users (username, hash) VALUES(?, ?)", username, hash)
            row = db.execute("SELECT * FROM users WHERE username=?", username)
            session["user_id"] = row[0]["id"]
            flash("You were successfully registered")
            return redirect("/")
        else:
            return apology("Username already in use", 400)


@app.route("/sell", methods=["GET", "POST"])
@login_required
def sell():
    """Sell shares of stock"""
    amount = request.form.get("shares")
    symbol = request.form.get("symbol")

    display_stocks = db.execute("SELECT DISTINCT symbol FROM stocks JOIN transactions ON stocks.id = transactions.stock_id JOIN users ON transactions.user_id = users.id WHERE users.id = ? AND symbol = ?",
                                session["user_id"], symbol)

    if request.method == "GET":

        symbol_list = db.execute("SELECT DISTINCT symbol FROM stocks JOIN transactions ON stocks.id = transactions.stock_id JOIN users ON transactions.user_id = users.id WHERE users.id = ?",
                                 session["user_id"])
        dictionary_list = dictionary(symbol_list, session["user_id"])
        return render_template("sell.html", symbol_list=dictionary_list)

    if request.method == "POST":

        if not symbol or lookup(symbol) == None:
            return apology("You need to type a valid stock symbol", 400)

        if not amount:
            return apology("Select the amount of shares", 400)

        if amount.isnumeric() == False:
            return apology("You need to type a positive integer!", 400)

        symbol_list = db.execute("SELECT DISTINCT symbol FROM stocks JOIN transactions ON stocks.id = transactions.stock_id JOIN users ON transactions.user_id = users.id WHERE users.id = ?",
                                 session["user_id"])
        dictionary_list = dictionary(symbol_list, session["user_id"])

        for value in dictionary_list:
            if value == symbol:
                total_shares = dictionary_list[value][1]

        if int(amount) <= total_shares:
            # Copying th dictionary generated by lookup function
            stock = copy.deepcopy(lookup(symbol))

            # The price depends on the amount of stocks
            stock_price = float(stock["price"]) * float(amount)

            # Checking the current amount of money
            total_money = db.execute("SELECT * FROM users WHERE id = ?", session["user_id"])
            symbol_id = db.execute("SELECT id FROM stocks WHERE symbol= ?", symbol)

            total_money[0]["cash"] = total_money[0]["cash"] + stock_price

            db.execute("INSERT INTO transactions (buy, sell, user_id, shares, stock_id) VALUES(?, ?, ?, ?, ?)",
                       0, stock_price, session["user_id"], amount, symbol_id[0]["id"])

            db.execute("UPDATE users SET cash = ? WHERE id = ?",
                       total_money[0]["cash"], session["user_id"])
            flash('Sold!')
            return redirect("/")
        else:
            return apology("You do not have enough shares to complete the sale!", 400)


def errorhandler(e):
    """Handle error"""
    if not isinstance(e, HTTPException):
        e = InternalServerError()
    return apology(e.name, e.code)


def dictionary(display_stocks, user):
    # Creating a dictionary with a list of the values that should be displayed
    stock_dict = {}
    for row in display_stocks:
        temp_dict = lookup(row["symbol"])
        stock_id = db.execute("SELECT id FROM stocks WHERE symbol = ?", row["symbol"])
        buy = db.execute("SELECT SUM(shares) FROM transactions WHERE buy > 0 AND stock_id = ? AND user_id = ?",
                         stock_id[0]["id"], user)
        sell = db.execute("SELECT SUM(shares) FROM transactions WHERE sell > 0 AND stock_id = ? AND user_id = ?",
                          stock_id[0]["id"], user)

        # Solving the error: python doesn't will be able o do the operation if the return od sell value is not a number
        # (SQLITE return a text message if the field it's empty)
        if sell[0]["SUM(shares)"]:
            total_stocks = buy[0]["SUM(shares)"] - sell[0]["SUM(shares)"]
        else:
            total_stocks = buy[0]["SUM(shares)"]
        if total_stocks > 0:
            total_value_stock = float(temp_dict["price"]) * float(total_stocks)
            stock_dict[row["symbol"]] = [usd(temp_dict["price"]), total_stocks, usd(total_value_stock)]
    return stock_dict


# Listen for errors
for code in default_exceptions:
    app.errorhandler(code)(errorhandler)

